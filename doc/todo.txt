* re-check small icon retina issue in A4i
* smart search for properties (setFoo)
* Use Sparkle for updates.
* Offer all fonts, not just hand-picked.

----

* syntax highlighting for header files
* figure out why command-line build different from in Xcode
* Get rid of Dev Tools concept and just present available SDKs.
* Use the stylesheet that comes with the docset.
* Give option to use custom stylesheet.
* not just "Copy Link" but "Open Link in Browser"
* Use tabless NSTabView for doc view.
* Autoselect after search
	* try searching for "scrollPoint".  Or "view".
	* search NSBrowserDelegate, is it not auto-selected because begins with "<"?
* Add progress indicator during search, and a count when done.
* Instead of a separate subtopic for "ALL Instance Methods" etc., put an "ALL" button in the "Instance Methods" subtopic cell.
* fast enumeration everywhere
* "Find a random item"
* Use this for Reveal In Finder: (void)[[NSWorkspace sharedWorkspace] selectFile:aFolderPath inFileViewerRootedAtPath:[aFolderPath stringByDeletingLastPathComponent]];
* Top and middle panes should keep fixed height during autoresizing.
* web site
	* add tips and tricks page
	* add faq: why does this site keep changing look?
	* fix HTML validation errors
* disable contextual menu items when there is no doc
* show "No Results", "No Classes", etc. in quicklist table when it is empty

----

* Store database on disk so it doesn't have to be reparsed on every launch.
	* Treat anchors as primary way of linking.
* Put a splitter between the subtopic list and doc list -- or maybe recalculate subtopic list width depending on font.

* service for putting multi-line method into clipboard
	* Submit radar about splitting method calls into multiple lines
* services in separate app
* add error handling to parser API
* add service to copy method name to clipboard
* add speech support (or rather don't remove it)
* start saving dSYMs
* hot key to activate

* rename digitalspokes plist to com.appkido.etc
	* maybe try to get the domain name back?

* go back to [AKDatabase defaultDatabase]
	* possibly pull _database out of AKTopic
	* hm -- why did I want to do this?  it was to prevent AKClassNode from having to know about AKAppController

* can DIGSLogExitingMethodPrematurely take varargs?
* cell classes are n/a for iPhone (UITableViewCell is actually a view)
* subtopic list should scroll to visible, e.g., if you search for NSNextMapEnumeratorPair, "Managing Map Tables" is far down the subtopic list and isn't visible
* in Xcode, search for "setTimeOffset:" finds the *property* timeOffset
* maybe shouldn't use Command-+ to add column; it's standard for increasing font size
* check whether .h parser handles class extensions
	* _are_ there any extensions I need to parse?
* search for "::" doesn't find -[CIImageProvider provideImageData:bytesPerRow:origin::size::userInfo:] -- it's because CIImageProvider is not showing up (a QuartzCore informal protocol)
* there exist *Carbon* protocols: IMKTextInput and IMKUnicodeTextInput; and the -insertText: method for the latter is not showing up (not documented, I assume)
* prefs > frameworks space bar doesn't work to toggle selection
* show which OS version deprecated symbols were deprecated in
* Remember scroll position in history.
* Odd -- the small dividers for the split views aren't small.
* Favorites menu shouldn't just say "Add Functions to favorites"; should be "Add AppKit Functions to favorites".
* Why isn't "NSAttributedString Application Kit Additions Reference" showing up in the General doc list for NSAttributedString?  (It doesn't in 0.971 either.)

* QCComposition -> instance methods -> protocols -> link to "Standard Protocols" opens web page; maybe should appear under General and link can go there within AppKiDo?
* make sure handling errors querying sqlite -- note Tony Cate's problem
* fix splitview problems reported by Gerriet
* "Classes in AppKit" doesn't include NSString
* would be nice to see header file containing functions / globals
* some way to convert between file:// URLs and http:// URLs
	* could drag from doc list into email and get the http:// URL
	* could drag from cocoa-dev message into AppKiDo and navigate to the right doc
* ApplicationServices -> Types & Constants -> Constants -- "Color Modes" appears twice, as does "Color Constants".
* [AKDocParser parseToken] treats bytes with high bit set as whitespace; works for now, but may someday have to properly handle charsets and encodings.
* Consider giving AKGlobalsNode an ivar indicating the behavior it's associated with (if any) instead of shoving the behavior name into the AKGlobalsNode name.
* Reconcile use of platform names as parameters with use of APPKIDO_FOR_IPHONE macro -- do I need to do both?
* Why do some searches take so long?  "cursor" is slow, yet "o" is fast even though it returns a superset of results.
	* Possible clue: I think it's the "<<" characters that get drawn in the search results.
* Rename fromPrefDictionary: to xxxFromPrefDictionary: in various classes.
* Fuzzy table contents -- double drawing?
	* Seems to have been fixed when I stopped using ak_stripHTML on the strings we display in the doc list
	* Oops, that didn't really fix the bug, yet for some reason it seems better

* "Inheritance" section now contains other stuff like links to code samples.  Parse and organize better.
* Put default defaults into a plist as bbum suggests.
* Try removing _kludgeXXX calls one by one.  See if parse results are the same.  Remember to test with Xcode 3.x.
* Add a Bindings subtopic?  (See "Cocoa Bindings Reference".  There's a list of classes that have bindings -- mostly view classes, but not all - and what those bindings are.)
* look for [agl] REMOVE

* Move AppKiDo to its own Space, open one window with the drawer open, minimize it.  Click an app in a different space, click back on AppKiDo -- the window unminiaturizes, but the drawer only opens part way.

* Provide some help dealing with the quarantines.

* There's a bunch of methods that fail my heuristic for deciding whether a deprecated method is a class/instance/delegate method.  For example, deserializeAlignedBytesLengthAtCursor: is a deprecated instance method of NSData which is declared in NSSerialization.h -- which is only in the 10.4u SDK, so in 10.5 I won't parse that file and I'll assume that method is a delegate method.  Considered moving all deprecated methods, regardless of type, to a separate subtopic, but that's too many subtopics -- *unless* I put an "ALL" button in subtopic cells for "Instance Methods", "Class Methods", etc.  Hm.

----

* Have the build script create an unstripped version as well.

* Should I be using DWARF?  See dSYM.

* When releasing, bake a build number into the version string.

* Add agvtool to workflow.

* [docSetPlist objectForKey:@"DocSetPlatformVersion"] sometimes returns nil with 3.1.3; handle more gracefully.

* Feature to add your own directory of headers.  Specify a project name (e.g., "AppKiDo") and a directory (e.g., /Users/alee/_Developer/appkido/trunk/src).  Recursively parse all headers, excluding .svn (and build?).  Give those headers special treatment -- include them in the database even though they don't have associated doc files.  Will have to update the parser to recognize @property in headers.  Won't be able to show docs, but can at least read the headers and navigate them.  Add quicklist for "All classes in project X".  Have some way to open selected header (and option to find .m) in tool of your choice -- Xcode or whatever.

* NSExceptionHandler has a "System Hang Constants" section.  Should be able to go to it when click on the link under, e.g., setExceptionHangingMask:.  Similarly for "Logging and Handling Constants" under setExceptionHandlingMask:.

* regarding init failure, noticed on objc-language: <http://lists.apple.com/archives/objc-language/2008/Sep/msg00133.html> "You should first clean up anything you already did in your -init, then call [super dealloc]. [self dealloc] or [self release] are bad because they might call some subclass's -dealloc method even though the subclass's -init hasn't done anything yet."

* regarding init failure, noticed on objc-language: <http://lists.apple.com/archives/objc-language/2008/Sep/msg00133.html> "You should first clean up anything you already did in your -init, then call [super dealloc]. [self dealloc] or [self release] are bad because they might call some subclass's -dealloc method even though the subclass's -init hasn't done anything yet."

----

* Maybe add subtopic for deprecated methods?
* Document the validation process to go through when there's a new doc update or a new SDK version: dump file, do a dump diff, etc.
* Can get rid of some of the #ifdef's on APPKIDO_FOR_IPHONE -- the ones that were to honor the NDA.
* Can I get rid of these methods in AKDatabase?  They never seem to be called.
	* -functionsGroupContainingFunction:inFramework:
	* -globalsGroupContainingGlobal:inFramework: in AKDatabase
* Maybe get rid of these methods in AKDatabase, for brevity (can send -count to the array).
	* -numberOfFunctionsGroupsForFramework:
	* -numberOfGlobalsGroupsForFramework:
* Can I be smarter about telling whether a deprecated method is a class or instance method?  Although if it's an instance method, can I tell if it's a delegate method?
* clean up copyrights in source files

* SubEthaEdit search Service only hits Mac OS ("classic") AppKiDo.
* Possible confusion: in AppKit Constants, there's "Cell Types [NSCell]" and "NSCellType [NSCell]"; perhaps no more confusing than the NSCell doc itself -- except they're so far apart in the doc list it may not be clear they're related; maybe should reorg so "Constants" and "Data Types" are separate topics -- this would allow another level of subdivisions.
* If you hide quicklist, move window near left edge of screen, and restore quicklist, the window should be pushed right to make room for the whole quicklist to be visible.
* AKPropertiesSubtopic should be an AKRealMethodsSubtopic (for behavior, not just class).
* Would it be possible to include CoreFoundation docs?
* Maybe force-exclude XgridFoundation from frameworks, as with Carbon?
* Add the ability to look things up / do searches in the Xcode doc window.
* I think can stop parsing headers when docset queries fully fleshed out.
* Why sometimes slow to jump to a favorite?
* Look into logging alternatives.
* Make sure parsing class extensions.
* Open a document online instead of locally.  Copy that URL to the pasteboard.
* Search the Examples directory for an example of the method.

----

## Efficiency ##

* parse faster
	* write new pure-C parser, use different strategy; or should I use DOM classes?
	* have list of HTML tags I care about, and attributes within those tags, and in the special case of tags that I designate as "header" tags (h1, h2, etc. but could also include 
	* pluck out byte offsets of where those tags begin and end, and their values for those attributes (in particular, the "name" attribute for anchor tags)
	* output of parsing one file is an ordered list of these byte offsets
	* create a mini-language for querying this list for a range of bytes satisfying some criterion (in particular, the range of bytes containing the documentation for a token that is identified by a given anchor string)

* parse less stuff
	* among HTML files, only need to parse class docs (to get delegate methods and notifications); everything else we can tell from the docset index
	* can we count on the doc file itself to tell us a protocol is informal?  if so, may not need to parse headers

* parse _more_ stuff
	* CoreFoundation?

* parse more correctly -- create better unit tests for detecting when a token is missing (like the NSIndexPath UI Kit Additions Guillaume reported)

* save less stuff in memory
	* query as needed from the docset index and the CoreData storage instead of storing everything in memory

* would startup be noticeably faster if AKDocSetIndex kept the database open all the time instead of opening and closing for each query?

* Speed: try NSUncachedRead or NSMappedRead (search cocoa-dev mailbox for Wil Shipley's suggestion on 2009-01-27).

