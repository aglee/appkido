## Big projects

* Store database on disk so it doesn't have to be reparsed on every launch.
* Use Sparkle for updates. (Shouldn't be *that* big a project.)
* Overhaul parsing code. 
	* Treat anchors as primary way of linking.
	* Look into BeautifulSoup for parsing.
	* Add error handling to parser API?
	* Can we now eliminate parsing of .h files and get all data from sqlite and HTML?
	* Maybe use NSXMLDocument for HTML parsing? Ideally this would make it easy to:
		* Omit the page footer when showing a doc that is the very last thing on the page.
		* Extract the method declaration line.
		* Present link to send Apple feedback.
		* Parse all globals, e.g. the ones in ApplicationServices > Types & Constants > Constants > Color Modes (QuickTime Constants) -- </Users/alee/Library/Developer/Shared/Documentation/DocSets/com.apple.adc.documentation.AppleOSX10_8.CoreReference.docset/Contents/Resources/Documents/documentation/QuickTime/Reference/QTRef_Constants/Reference/reference.html>. Although actually that info can and should better be gotten from the sqlite database.
		* Construct an HTML page that uses the original CSS files but only shows one doc component.
	* Maybe decouple parsers from concept of file? So parser can operate on data that doesn't come from a file.
	* Ooh -- noticed new XML files in docset.
* tab chain
	* try Avi's suggestion of event tap
	* tab chain: doesn't handle the tab-to-links web pref
	* tab chain: Don't use private API to calculate tab chain (we currently use knowledge of toolbar view class names). Try to do it automatically.
	* tab chain: try to add buttons automatically when Full Keyboard -- i.e., simulate NSWindow's recalc
	* fully reproduce recalculateKeyViewLoop
		* consider drawers
		* consider popovers?
	* showWindow: and makeKeyAndOrderFront: both called recalculateKeyViewLoop despite my auto-recalc setting; the docs say the auto-recalc setting is for when views are added
	* Articles I found with key view loop advice: <http://www.cocoabuilder.com/archive/cocoa/177975-guidelines-for-the-key-view-loop.html> (should ping Justin Bur <http://www.linkedin.com/pub/justin-bur/0/473/32> <http://jbb.poslfit.com/Pages/cv-en.html> <justin@cam.org> <http://www.druide.com/> <http://www.cocoabuilder.com/archive/cocoa/89019-executing-nextkeyview-from-nsdrawer-to-nswindow.html> <http://lapcatsoftware.com/blog/2008/02/20/nsscrollview-in-a-key-view-loop-or-fembot-in-a-wet-t-shirt/> <http://osdir.com/ml/cocoa-dev/2009-08/msg00488.html>

----

## Bugs/UX stuff

* NSOpenPanel, beginForDirectory:file:types:modelessDelegate:didEndSelector:contextInfo:, "Use beginWithCompletionHandler: instead", click on the link to beginWithCompletionHandler:. It opens doc in browser instead of staying within AppKiDo. Link is file:///Users/alee/Library/Developer/Shared/Documentation/DocSets/com.apple.adc.documentation.AppleOSX10_8.CoreReference.docset/Contents/Resources/Documents/documentation/Cocoa/Reference/ApplicationKit/Classes/NSSavePanel_Class/Reference/Reference.html#//apple_ref/doc/uid/20000309-SW24



* Fix the xcode-select bug Mike Morton found.
	* Make alert more informative.
	* Use custom alert window instead of NSAlert one.

* Noticed in Dash: NSObject(DRBurnProgressPanelDelegateMethods) Class Reference -- seems to be a doc file linked to a category

* Make web site Retina-friendly

* Would like to rename digitalspokes plist to com.appkido.etc.
* Crashed when toggling toolbar with Option-Command-T -- could not reproduce, and Instruments didn't show a zombie.
* Try to reproduce reported bug: move AppKiDo to its own Space, open one window with the drawer open, minimize it.  Click an app in a different space, click back on AppKiDo -- the window unminiaturizes, but the drawer only opens part way.
* Cmd-+/- bad choice for browser columns; have them affect web view instead; maybe use Opt-Cmd-=/- for browser columns.
* Re-examine browser height code. Maybe enforce minimum height. Issue: launched, it remembered zero-height browser, but did not expand browser when I tried to toggle it. Don't know why. Currently using _defaultBrowserHeight workaround.

----

## Correctness

* The #ifdef problem -- we only parse the first occurrence of NSURL here. AppKiDo-for-Cocoa won't know that NSURL conforms to NSURLHandleClient. In this case we get away with it, sort of, because NSURLHandleClient is deprecated.

		#if (TARGET_OS_EMBEDDED || TARGET_OS_IPHONE)
		@interface NSURL: NSObject <NSSecureCoding, NSCopying>
		#else
		@interface NSURL: NSObject <NSSecureCoding, NSCopying, NSURLHandleClient>
		#endif

* Class NSMovie is deprecated -- show that somehow.
* Parsing flaw. Thinks "playback" is an enum; see ApplicationServices > Types & Constants > Constants > Atom ID Codes.
* Maybe should parse QuartzCore before AppKit. CIColor is a QuartzCore class with AppKit additions.

----

## Code hygiene

* Have a dev branch and have master be the release branch.
* Proper CFBundleShortVersionString and proper 3-part version numbering.
* Search *might* be quick enough now, but it should really be in the background instead of blocking the main thread.
* Clarify terminology in the navigation methods -- maybe should change all selectXXX to goToXXX for consistency.
* AKWindowController is huge. Split into categories? Subclasses? Separate classes?
* Be consistent about "Init/dealloc/awake" vs. "Init/awake/dealloc".
* Fix broken HeaderDoc syntax.
* *Could* use newer singleton pattern using dispatch_once.
* Use unsafe_unretained instead of assign for objects.
* Take varargs in DIGSLogError_ExitingMethodPrematurely.
* Replace "DIGS" prefix with "AL", move to ALUtilities.
* [AKDocParser parseToken] treats bytes with high bit set as whitespace; works for now, but should really properly handle charsets and encodings.
* Review "[agl]" comments now and then.

----

## Maybe later

* ^P/^N to go up and down in lists
* allow for "wip" to be in the version string
* Get new icons.
* Get type-to-select working, especially in the doc list. The prefixes added in the doc list are throwing it off.
* also use real build numbers
* option to view classes-in-framework hierarchically
* Still getting double drawing -- just saw it in the doc list after a search for QCComposition.
* Do I need to speed up validation?

* idea: show all classes that implement a formal protocol
* idea: offer NSPathControl as an alternative to the topic browser?
* crashes when service sometimes
* mysterious exception when hit key like "s" with doc list selected; nothing gets printed and it seems to have no ill effect, but it triggers my exception breakpoint; maybe bug in type-to-select (or deliberately swallowed exception)?
* add crashreporter
* Open in Browser should go to the symbol, not to top of page.
* would be nice to see header file containing functions / globals

* prefs > frameworks space bar doesn't work to toggle selection
* show which OS version deprecated symbols were deprecated in
* Remember scroll position in history.
* Use the stylesheet that comes with the docset.
* Give option to use custom stylesheet.
* easily delete multiple Favorites? or all?
* ocd about "Subclasses must override" language. Also "for internal use".
* service from akd itself sometimes makes new window
* open test parser for a .h file
* clipboard-based enhancements:
	* service for putting multi-line method into clipboard
	* add service to copy method name to clipboard
	* multi-select in doc list and Copy method prototypes
* are those parsing kludges still needed?
* Add progress indicator during search.
* using AKSearchQuery to follow links could be expensive; use "c_ref" etc. to perform targeted lookups
* localize

----

* Check again on A4i reported small icon issue on Retina screen.
* Offer all fonts, not just hand-picked.
	* "canny unvalley" -- having no font panel makes app look like a port or a Java app
* Can an alternative to the NSDrawer work in a similar way UI-wise?

----

* syntax highlighting for header files
* figure out command-line build
* Get rid of Dev Tools concept and just present available SDKs?
	* Eventually maybe only support docs in ~/Library/Developer/Shared?
* web site
	* add tips and tricks page
	* fix HTML validation errors
* show "No Results", "No Classes", etc. in quicklist table when it is empty

----

* service for putting multi-line method into clipboard
	* Submit radar about splitting method calls into multiple lines
* services in separate app
* add service to copy method name to clipboard
* start saving dSYMs
* hot key to activate
* check whether .h parser handles class extensions
	* _are_ there any extensions I need to parse?
	* I suspect they look just like categories; could add an AKBehaviorNode subclass for class extensions
* search for "::" doesn't find -[CIImageProvider provideImageData:bytesPerRow:origin::size::userInfo:] -- it's because CIImageProvider is not showing up (a QuartzCore informal protocol)
* there exist *Carbon* protocols: IMKTextInput and IMKUnicodeTextInput; and the -insertText: method for the latter is not showing up (not documented, I assume)
* QCComposition -> instance methods -> protocols -> link to "Standard Protocols" opens web page; maybe should appear under General and link can go there within AppKiDo?
* make sure handling errors querying sqlite -- note Tony Cate's problem
* some way to convert between file:// URLs and http:// URLs
	* could drag from doc list into email and get the http:// URL
	* could drag from cocoa-dev message into AppKiDo and navigate to the right doc
* Consider giving AKGlobalsNode an ivar indicating the behavior it's associated with (if any) instead of shoving the behavior name into the AKGlobalsNode name.
* Reconcile use of platform names as parameters with use of APPKIDO_FOR_IPHONE macro -- do I need to do both?
* Why do some searches take so long?  "cursor" is slow, yet "o" is fast even though it returns a superset of results.
	* Possible clue: I think it's the "<<" characters that get drawn in the search results.
* "Inheritance" section now contains other stuff like links to code samples.  Parse and organize better.
* Try removing _kludgeXXX calls one by one.  See if parse results are the same.  Remember to test with Xcode 3.x.
* Add a Bindings subtopic?  (See "Cocoa Bindings Reference".  There's a list of classes that have bindings -- mostly view classes, but not all - and what those bindings are.)
* look for [agl] REMOVE

* Provide some help dealing with the quarantines.

* There's a bunch of methods that fail my heuristic for deciding whether a deprecated method is a class/instance/delegate method.  For example, deserializeAlignedBytesLengthAtCursor: is a deprecated instance method of NSData which is declared in NSSerialization.h -- which is only in the 10.4u SDK, so in 10.5 I won't parse that file and I'll assume that method is a delegate method.  Considered moving all deprecated methods, regardless of type, to a separate subtopic, but that's too many subtopics -- *unless* I put an "ALL" button in subtopic cells for "Instance Methods", "Class Methods", etc.  Hm.

----

* Have the build script create an unstripped version as well.

* Should I be using DWARF?  See dSYM.

* When releasing, bake a build number into the version string.

* Add agvtool to workflow.

* [docSetPlist objectForKey:@"DocSetPlatformVersion"] sometimes returns nil with 3.1.3; handle more gracefully.

* Feature to add your own directory of headers.  Specify a project name (e.g., "AppKiDo") and a directory (e.g., /Users/alee/_Developer/appkido/trunk/src).  Recursively parse all headers, excluding .svn (and build?).  Give those headers special treatment -- include them in the database even though they don't have associated doc files.  Will have to update the parser to recognize @property in headers.  Won't be able to show docs, but can at least read the headers and navigate them.  Add quicklist for "All classes in project X".  Have some way to open selected header (and option to find .m) in tool of your choice -- Xcode or whatever.

* NSExceptionHandler has a "System Hang Constants" section.  Should be able to go to it when click on the link under, e.g., setExceptionHangingMask:.  Similarly for "Logging and Handling Constants" under setExceptionHandlingMask:.

* regarding init failure, noticed on objc-language: <http://lists.apple.com/archives/objc-language/2008/Sep/msg00133.html> "You should first clean up anything you already did in your -init, then call [super dealloc]. [self dealloc] or [self release] are bad because they might call some subclass's -dealloc method even though the subclass's -init hasn't done anything yet."

* regarding init failure, noticed on objc-language: <http://lists.apple.com/archives/objc-language/2008/Sep/msg00133.html> "You should first clean up anything you already did in your -init, then call [super dealloc]. [self dealloc] or [self release] are bad because they might call some subclass's -dealloc method even though the subclass's -init hasn't done anything yet."

----

* Maybe add subtopic for deprecated methods?
* Document the QA process to go through when there's a new doc update or a new SDK version: dump file, do a dump diff, etc.
* Can I be smarter about telling whether a deprecated method is a class or instance method?  Although if it's an instance method, can I tell if it's a delegate method?
* clean up copyrights in source files

* SubEthaEdit search Service only hits Mac OS ("classic") AppKiDo.
	* Does SubEthaEdit still have the Service?
* Possible confusion: in AppKit Constants, there's "Cell Types [NSCell]" and "NSCellType [NSCell]"; perhaps no more confusing than the NSCell doc itself -- except they're so far apart in the doc list it may not be clear they're related; maybe should reorg so "Constants" and "Data Types" are separate topics -- this would allow another level of subdivisions.
* If you hide quicklist, move window near left edge of screen, and restore quicklist, the window should be pushed right to make room for the whole quicklist to be visible.
* Would it be possible to include CoreFoundation docs?
* Maybe force-exclude XgridFoundation from frameworks, as with Carbon?
* Add the ability to look things up / do searches in the Xcode doc window.
* Why sometimes slow to jump to a favorite?
* Look into logging alternatives.
* Make sure parsing class extensions.
* Open a document online instead of locally.  Copy that URL to the pasteboard.
* Search the Examples directory for an example of the method.

----

## Efficiency ##

* parse faster
	* write new pure-C parser, use different strategy; or should I use DOM classes?
	* have list of HTML tags I care about, and attributes within those tags, and in the special case of tags that I designate as "header" tags (h1, h2, etc. but could also include 
	* pluck out byte offsets of where those tags begin and end, and their values for those attributes (in particular, the "name" attribute for anchor tags)
	* output of parsing one file is an ordered list of these byte offsets
	* create a mini-language for querying this list for a range of bytes satisfying some criterion (in particular, the range of bytes containing the documentation for a token that is identified by a given anchor string)

* parse less stuff
	* among HTML files, only need to parse class docs (to get delegate methods and notifications); everything else we can tell from the docset index
	* can we count on the doc file itself to tell us a protocol is informal?  if so, may not need to parse headers

* parse _more_ stuff
	* CoreFoundation?
	* full-text search?

* parse more correctly -- create better unit tests for detecting when a token is missing (like the NSIndexPath UI Kit Additions Guillaume reported)

* save less stuff in memory
	* query as needed from the docset index and the CoreData storage instead of storing everything in memory

* would startup be noticeably faster if AKDocSetIndex kept the sqlite database open all the time instead of opening and closing for each query?

* Speed: try NSUncachedRead or NSMappedRead (search cocoa-dev mailbox for Wil Shipley's suggestion on 2009-01-27).
	* I'm not read-only though, due to the kludgy tweaks of the HTML; but might help for parsing .h files

----

## Notes

* Reason for not using "item-based" NSBrowser delegate methods: I want loadColumnZero to recreate all cells, so that they pick up font changes to the cellPrototype.
