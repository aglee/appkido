ABOUT THIS DOCUMENT
===================
This is a hastily written draft introduction to the implementation internals of AppKiDo.  There are many more topics to cover.

[agl] TODO: This will need to be updated for 0.98.
[agl] Mention concept of "selectable" frameworks.



WHAT HAPPENS WHEN YOU RUN APPKIDO
=================================
AppKiDo lets you navigate logical relationships among API constructs -- for example, between a class and its subclasses, or between a protocol and its methods, or between a framework and its functions.  AppKiDo derives these relationships by parsing two kinds of text files:

    * HTML files in your /Developer directory, and

    * .h files in framework directories under /System/Library/Frameworks, such as Foundation.framework and AppKit.framework.

The locations and internal structure of these files are almost entirely invisible to the user.  The information derived from the files is stored in a data structure called "the database."

An AppKiDo session has three phases: the launch phase, the browse phase, and the quit phase.


The Launch Phase
----------------
(a) Load user preferences
(b) Populate the database
(c) Load any window state that was saved from the previous launch


The Browse Phase
----------------
(a) Let the user navigate the database
(b) In so doing, modify window states and possibly preferences if the user opens the prefs panel


The Quit Phase
--------------
(a) Save window states and preferences


THE MODEL -- API CONSTRUCTS AND THE DATABASE
============================================
The classes in AppKiDo mostly fall into conventional Model-View-Controller categories, with some support classes thrown in that don't fall cleanly into an MVC bucket.  This section gives an overview of the model.

The fundamental model object in AppKiDo is an API construct.  There are several types of API construct.  Here are the API constructs referenced by AppKiDo.

* Frameworks.  Examples: "Foundation" and "AppKit".

* Classes and protocols (collectively referred to as "behaviors") within each framework.  Examples: "NSObject" and "NSTableDataSource".

    NOTE: AppKiDo does not list Objective-C categories.

* Methods and notifications implemented by each behavior.  Examples: "-init" and "+sharedInstance".

    NOTE: Notifications are treated similarly to methods because in most cases they are "inherited" by subclasses.  Delegate methods are treated similarly to regular methods, for the same reason.

* Functions and macros provided by each framework.  Examples: "NSStringFromSelector()" and "NSAssert1()".

* Types, constants, and other globals provided by each framework.  Examples: "NSApp" and "NSRoundedBezelStyle".

AppKiDo keeps track of these constructs and relationships using a data structure called the "framework database," or just "the database."  Each entry in the database contains information about an API construct.

The database is an instance of the abstract class AKDatabase, which has two concrete subclasses: AKDatabaseWithDocSet and AKOldDatabase.  AKDatabaseWithDocSet is used with the documentation in Xcode 3 or later, which is organized into a bundle called a docset.  AKOldDatabase is used with older versions of Xcode, which organize the documentation into directories using rough conventions.

The database is populated when AppKiDo is launched, and is read-only thereafter.  The result of a database query is zero or more instances of AKDatabaseNode and its descendant classes.


CONTROLLERS AND THEIR VIEWS -- ANATOMY OF THE UI
================================================

Here are the major parts of an AppKiDo browser window, and the controller classes attached to them.

* The topic browser.  The topic browser displays (1) the class inheritance hierarchy and (2) for each framework, the available types of API constructs that are not classes -- protocols, functions, and types and constants.  Each item in the topic browser is called a topic.

    NOTE: When you select a topic in the topic browser, the items that appear in the next column are, confusingly, NOT called subtopics.  I haven't figured out what to call them.  The term "subtopic" is used for the subtopic list.

* The subtopic list.  The subtopic list displays categories of documentation that are available for the topic that is selected in the topic browser.  For example, if you select a class in the topic browser, the subtopics include "Class Methods", "Instance Methods", "Delegate Methods", and "Notifications".  If you select a framework in the topic browser and then the "Functions" topic for that framework, the subtopics are named groups of functions.

* The doc list.  The doc list is refreshed when you select something in the subtopic list.

* The doc view.  The doc view displays the documentation for whatever item is selected in the doc list.

* The quicklist drawer.
