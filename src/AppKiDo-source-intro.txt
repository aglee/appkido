ABOUT THIS DOCUMENT
===================
This is a hastily written draft introduction to the implementation internals of AppKiDo.  There are many more topics to cover.

[agl] TODO: This will need to be updated for 0.98.
[agl] Mention concept of "selectable" frameworks.



TERMS OF USAGE FOR THIS SOURCE CODE
===================================
(1) You may not sell AppKiDo, its source code, or a derivative thereof.  For example, you may not tweak my code, recompile it, and sell it as "BetterThanAppKiDo" (even if it is), but you may give away the improved app as freeware.  Another example: if you're selling a software compilation, you may not include AppKiDo in that compilation.

(2) You may include minor portions of AppKiDo code in your own projects, commercial or otherwise, with or without modification, provided you give credit.  Something like "Uses code from Andy Lee's AppKiDo project" will suffice.

(3) You don't have to share changes with me or anyone else.  I'd sure appreciate it, though!

(4) You may do anything else you want with the AppKiDo code, provided you meet terms (1), (2), and (3).




WHAT HAPPENS WHEN YOU RUN APPKIDO
=================================
AppKiDo lets you navigate logical relationships among API constructs -- for example, between a class and its subclasses, or between a protocol and its methods, or between a framework and its functions.  AppKiDo derives these relationships by parsing two kinds of text files:

    * HTML files in your /Developer directory, and

    * .h files in framework directories under /System/Library/Frameworks, such as Foundation.framework and AppKit.framework.

The locations and internal structure of these files are almost entirely invisible to the user.

An AppKiDo session has three phases: the launch phase, the browse phase, and the quit phase.


The Launch Phase
----------------
(a) Load user preferences
(b) Load any window state that was saved from the previous launch
(c) Populate the database


The Browse Phase
----------------
(a) Let the user navigate the database
(b) In so doing, modify window states and possibly preferences if the user opens the prefs panel


The Quit Phase
--------------
(a) Save window states and preferences


THE MODEL -- API CONSTRUCTS AND THE DATABASE
============================================
The classes in AppKiDo mostly fall into conventional Model-View-Controller categories, with some support classes thrown in that don't fall cleanly into an MVC bucket.  This section gives an overview of the model.

The fundamental model object in AppKiDo is an API construct.  There are several types of API construct.  Here are the API constructs referenced by AppKiDo.

* Frameworks.  Examples: "Foundation" and "AppKit".

* Classes and protocols (collectively referred to as "behaviors") within each framework.  Examples: "NSObject" and "NSTableDataSource".

    NOTE: AppKiDo does not list Objective-C categories.

* Methods and notifications implemented by each behavior.  Examples: "-init" and "+sharedInstance".

    NOTE: Notifications are treated similarly to methods because in most cases they are "inherited" by subclasses.  Delegate methods are treated similarly to regular methods, for the same reason.

* Functions and macros provided by each framework.  Examples: "NSStringFromSelector()" and "NSAssert1()".

* Types, constants, and other globals provided by each framework.  Examples: "NSApp" and "NSRoundedBezelStyle".

AppKiDo keeps track of these constructs and relationships using a data structure called the "framework database," or just "the database."  Each entry in the database contains information about an API construct.

The database is an instance of the class AKDatabase.  The result of a database query is zero or more instances of AKDatabaseNode classes.


CONTROLLERS AND THEIR VIEWS -- ANATOMY OF THE UI
================================================
Here are the major parts of an AppKiDo browser window, and the controller classes attached to them.

* The topic browser.  The topic browser displays (1) the class inheritance hierarchy and (2) for each framework, the available types of API constructs that are not classes -- protocols, functions, and types and constants.  Each item in the topic browser is called a topic.

    NOTE: When you select a topic in the topic browser, the items that appear in the next column are, confusingly, NOT called subtopics.  I haven't figured out what to call them.  The term "subtopic" is used for the subtopic list.

* The subtopic list.  The subtopic list displays categories of documentation that are available for the topic that is selected in the topic browser.  The subtopic list refreshes when you select something in the topic browser.  What gets listed depends on what type of topic you selected.  For example, if you go to the topic browser and select a class, the subtopics include "Class Methods", "Instance Methods", "Delegate Methods", and "Notifications".  If you select the "Protocols" topic for a framework,

* The doc list.  The doc list is refreshed when you select something in the subtopic list.

* The doc view.  The doc view displays the documentation for whatever item is selected in the doc list.

* The quicklist drawer.
